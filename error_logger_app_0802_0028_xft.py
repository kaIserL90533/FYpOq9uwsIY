# 代码生成时间: 2025-08-02 00:28:23
# error_logger_app/__init__.py

# error_logger_app/admin.py
from django.contrib import admin
from .models import ErrorLog

@admin.register(ErrorLog)
class ErrorLogAdmin(admin.ModelAdmin):
    list_display = ('id', 'message', 'level', 'created_at')

# error_logger_app/apps.py
from django.apps import AppConfig

class ErrorLoggerAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'error_logger_app'
    verbose_name = 'Error Logger Application'

# error_logger_app/forms.py
from django import forms
from .models import ErrorLog

class ErrorLogForm(forms.ModelForm):
    class Meta:
        model = ErrorLog
        fields = ['message', 'level']

# error_logger_app/models.py
from django.db import models
import logging

# Create your models here.
class ErrorLog(models.Model):
    ERROR_LEVELS = [
        ('DEBUG', 'Debug'),
        ('INFO', 'Info'),
        ('WARNING', 'Warning'),
        ('ERROR', 'Error'),
        ('CRITICAL', 'Critical'),
    ]
    
    message = models.CharField(max_length=1024)
    level = models.CharField(max_length=10, choices=ERROR_LEVELS)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f'ErrorLog {self.id}'

# error_logger_app/views.py
from django.shortcuts import render
from django.views.decorators.http import require_http_methods
from .forms import ErrorLogForm
from .models import ErrorLog

# Create your views here.
@require_http_methods(['POST'])
def error_log_view(request):
    """
    View function to handle error logging.
    
    :param request: HttpRequest object containing error data.
    :return: HttpResponse indicating success or failure.
    """
    form = ErrorLogForm(request.POST)
    if form.is_valid():
        form.save()
        return render(request, 'error_logger_app/success.html', {'message': 'Error logged successfully'})
    else:
        return render(request, 'error_logger_app/error.html', {'form': form})

# error_logger_app/urls.py
from django.urls import path
from .views import error_log_view

# Define the URL patterns for error logger app.
urlpatterns = [
    path('log-error/', error_log_view, name='log-error'),
]

# error_logger_app/tests.py
from django.test import TestCase
from .models import ErrorLog

# Create your tests here.
class ErrorLogTestCase(TestCase):
    def test_error_log_creation(self):
        """
        Test case to create an error log and verify its creation.
        """
        error_log = ErrorLog.objects.create(message='Test error message', level='ERROR')
        self.assertIsNotNone(error_log)

    def test_error_log_retrieve(self):
        """
        Test case to retrieve an error log.
        """
        error_log = ErrorLog.objects.create(message='Test error message', level='ERROR')
        retrieved_error_log = ErrorLog.objects.get(id=error_log.id)
        self.assertEqual(error_log, retrieved_error_log)

# error_logger_app/migrations/0001_initial.py
# This file is auto-generated by Django and should not be edited manually.

# error_logger_app/templates/error_logger_app/error.html
{% extends "base.html" %}

{% block content %}
    <h1>Error Logging Failed</h1>
    <form method="post" novalidate>
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Submit</button>
    </form>
{% endblock %}

# error_logger_app/templates/error_logger_app/success.html
{% extends "base.html" %}

{% block content %}
    <h1>Error Logged Successfully</h1>
    <p>{{ message }}</p>
{% endblock %}
